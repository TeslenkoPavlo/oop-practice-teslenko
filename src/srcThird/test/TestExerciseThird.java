package srcThird.test;

import srcThird.domain.ExerciseThird;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;

/**
 * –ö–ª–∞—Å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –æ–±—á–∏—Å–ª–µ–Ω—å 
 * —Ç–∞ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó/–¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª–∞—Å—É ExerciseThird.
 * 
 * @author –¢–µ—Å–ª–µ–Ω–∫–æ –ü–∞–≤–ª–æ
 * @version 3.0
 */
public class TestExerciseThird {

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É
    private static final String ANSI_RESET = "\u001B[0m";
    private static final String ANSI_GREEN = "\u001B[32m";
    private static final String ANSI_YELLOW = "\u001B[33m";
    private static final String ANSI_BLUE = "\u001B[34m";
    private static final String ANSI_PURPLE = "\u001B[35m";
    private static final String ANSI_CYAN = "\u001B[36m";
    private static final String ANSI_RED = "\u001B[31m";

    /**
     * –ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤
     * 
     * @param args –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è)
     */
    public static void main(String[] args) {
        printHeader("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –æ–±—á–∏—Å–ª–µ–Ω—å —Ç–∞ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó üß™");

        // –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω—å
        testCalculations();

        // –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞ –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        testSerialization();

        printFooter("‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! ‚úÖ");
    }

    /**
     * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è (sum, average, min, max)
     */
    private static void testCalculations() {
        printTestHeader("üî¢ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –æ–±—á–∏—Å–ª–µ–Ω—å");

        // –¢–µ—Å—Ç –Ω–∞ –Ω–µ–ø–æ—Ä–æ–∂–Ω—å–æ–º—É –º–∞—Å–∏–≤—ñ
        int[] numbers = {5, 2, 8, 1, 9};
        ExerciseThird exercise = new ExerciseThird(numbers, "üìä –¢–µ—Å—Ç–æ–≤–∏–π –º–∞—Å–∏–≤");

        printTestResult("üìã –¢–µ—Å—Ç–æ–≤–∏–π –º–∞—Å–∏–≤ –¥–∞–Ω–∏—Ö", exercise);

        // –û—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        int expectedSum = 25;
        double expectedAverage = 5.0;
        int expectedMin = 1;
        int expectedMax = 9;

        // –§–∞–∫—Ç–∏—á–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        int actualSum = exercise.getSum();
        double actualAverage = exercise.getAverage();
        int actualMin = exercise.getMin();
        int actualMax = exercise.getMax();

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        printCalculationTest("‚ûï –°—É–º–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤", expectedSum, actualSum);
        printCalculationTest("‚ûó –°–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ", expectedAverage, actualAverage);
        printCalculationTest("‚¨áÔ∏è –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç", expectedMin, actualMin);
        printCalculationTest("‚¨ÜÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç", expectedMax, actualMax);
    }

    /**
     * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞ –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ–±'—î–∫—Ç—ñ–≤
     */
    private static void testSerialization() {
        printTestHeader("üíæ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó/–¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó");

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        int[] numbers = {10, 20, 30, 40, 50};
        ExerciseThird original = new ExerciseThird(numbers, "üíΩ –î–∞–Ω—ñ –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó");

        printTestResult("üì§ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó", original);

        // –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        String filePath = "exercise.ser";

        try {
            // –°–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
            original.serialize(filePath);
            printSuccess("üì¶ –û–±'—î–∫—Ç —É—Å–ø—ñ—à–Ω–æ —Å–µ—Ä—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É —Ñ–∞–π–ª: " + filePath);

            // –î–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
            ExerciseThird deserialized = ExerciseThird.deserialize(filePath);
            printTestResult("üì• –î–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –æ–±'—î–∫—Ç", deserialized);

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            boolean numbersEqual = Arrays.equals(original.getNumbers(), deserialized.getNumbers());

            // –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            printSerializationTest("üî¢ –ú–∞—Å–∏–≤–∏ —á–∏—Å–µ–ª —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å", numbersEqual);

            if (numbersEqual) {
                printSuccess("üéâ –°–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!");
            } else {
                printError("‚ùå –î–∞–Ω—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å –ø—ñ—Å–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó/–¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó!");
            }

            // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
            File file = new File(filePath);
            if (file.delete()) {
                printInfo("üóëÔ∏è –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ");
            }

        } catch (IOException | ClassNotFoundException e) {
            printError("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó/–¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: " + e.getMessage());
        }
    }

    /**
     * –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É
     */
    private static void printHeader(String text) {
        String border = "‚ïê".repeat(text.length() + 10);
        System.out.println("\n‚ïî" + border + "‚ïó");
        System.out.println("‚ïë   " + ANSI_PURPLE + text + ANSI_RESET + "   ‚ïë");
        System.out.println("‚ïö" + border + "‚ïù\n");
    }

    private static void printFooter(String text) {
        String border = "‚îÄ".repeat(text.length() + 10);
        System.out.println("\n‚îå" + border + "‚îê");
        System.out.println("‚îÇ   " + ANSI_GREEN + text + ANSI_RESET + "   ‚îÇ");
        System.out.println("‚îî" + border + "‚îò\n");
    }

    private static void printTestHeader(String text) {
        String border = "‚îÄ".repeat(text.length() + 6);
        System.out.println("\n‚îè" + border + "‚îì");
        System.out.println("‚îÉ  " + ANSI_CYAN + text + ANSI_RESET + "  ‚îÉ");
        System.out.println("‚îó" + border + "‚îõ");
    }

    private static void printTestResult(String label, ExerciseThird exercise) {
        System.out.println(ANSI_YELLOW + "‚û§ " + label + ": " + ANSI_RESET + exercise);
    }

    private static <T> void printCalculationTest(String label, T expected, T actual) {
        boolean passed = expected.equals(actual);
        String result = passed ? ANSI_GREEN + "‚úì PASSED" + ANSI_RESET : ANSI_RED + "‚úó FAILED" + ANSI_RESET;
        System.out.println(ANSI_BLUE + "  ‚óÜ " + label + ": " + ANSI_RESET +
                          "–æ—á—ñ–∫—É–≤–∞–Ω–æ = " + expected + ", –æ—Ç—Ä–∏–º–∞–Ω–æ = " + actual + " ‚Üí " + result);
    }

    private static void printSerializationTest(String label, boolean passed) {
        String result = passed ? ANSI_GREEN + "‚úì PASSED" + ANSI_RESET : ANSI_RED + "‚úó FAILED" + ANSI_RESET;
        System.out.println(ANSI_BLUE + "  ‚óÜ " + label + ": " + ANSI_RESET + result);
    }

    private static void printInfo(String text) {
        System.out.println(ANSI_BLUE + "  ‚ÑπÔ∏è " + text + ANSI_RESET);
    }

    private static void printSuccess(String text) {
        System.out.println(ANSI_GREEN + "  ‚úÖ " + text + ANSI_RESET);
    }

    private static void printError(String text) {
        System.out.println(ANSI_RED + "  ‚ùå " + text + ANSI_RESET);
    }
}