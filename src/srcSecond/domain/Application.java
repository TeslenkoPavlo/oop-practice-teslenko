
package src.srcSecond.domain;

import java.io.*;
import java.util.*;

/**
 * –û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å –ø—Ä–æ–≥—Ä–∞–º–∏, —â–æ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î —Ä–æ–±–æ—Ç—É –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ.
 * <p>
 * –†–µ–∞–ª—ñ–∑—É—î –ø—É–Ω–∫—Ç 3 –∑–∞–≤–¥–∞–Ω–Ω—è: –ó–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —ñ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
 * <p>
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –æ–±'—î–∫—Ç–∏ TableView, —Å—Ç–≤–æ—Ä–µ–Ω—ñ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É TableViewFactory.
 * 
 * @author –¢–µ—Å–ª–µ–Ω–∫–æ –ü–∞–≤–ª–æ
 * @version 1.0
 */
public class Application {
    /**
     * –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –≤–∏–≤–æ–¥—É –≤ –∫–æ–Ω—Å–æ–ª—å
     */
    public static final String ANSI_RESET = "\u001B[0m";
    public static final String ANSI_GREEN = "\u001B[32m";
    public static final String ANSI_CYAN = "\u001B[36m";
    public static final String ANSI_YELLOW = "\u001B[33m";
    public static final String ANSI_RED = "\u001B[31m";
    public static final String ANSI_BLUE = "\u001B[34m";
    public static final String ANSI_PURPLE = "\u001B[35m";
    public static final String ANSI_BOLD = "\u001B[1m";
    
    // –°–∏–º–≤–æ–ª–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
    public static final String MATH_SYMBOL = "üßÆ";
    public static final String VIEW_SYMBOL = "üëÅÔ∏è";
    public static final String GENERATE_SYMBOL = "üîÑ";
    public static final String SAVE_SYMBOL = "üíæ";
    public static final String RESTORE_SYMBOL = "üìÇ";
    public static final String EXIT_SYMBOL = "üö™";
    
    /**
     * –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –º–µ–Ω—é
     */
    private static final String MENU_HEADER = "\n====== –ú–ï–ù–Æ ======";
    private static final String MENU_FOOTER = "==================";
    
    /**
     * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ TableView
     */
    private TableViewFactory tableViewFactory;
    
    /**
     * –û–±'—î–∫—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ
     */
    private TableView tableView;
    
    /**
     * –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Ç–∞–±–ª–∏—Ü—ñ
     */
    private List<ComputationResult> results;
    
    /**
     * –Ü–º'—è —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
     */
    private static final String FILE_NAME = "results.ser";
    
    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
     */
    public Application() {
        this.tableViewFactory = new ConcreteTableViewFactory();
        this.tableView = tableViewFactory.createTableView();
        this.results = new ArrayList<>();
    }
    
    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑ –≤–∫–∞–∑–∞–Ω–æ—é —Ñ–∞–±—Ä–∏–∫–æ—é
     * 
     * @param factory —Ñ–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ TableView
     */
    public Application(TableViewFactory factory) {
        this.tableViewFactory = factory;
        this.tableView = factory.createTableView();
        this.results = new ArrayList<>();
    }
    
    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –æ–±—á–∏—Å–ª–µ–Ω—å
     */
    public void initializeResults() {
        results.clear();
        // –î–æ–¥–∞—î–º–æ –¥–≤–∞ –Ω—É–ª—å–æ–≤–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        results.add(new ComputationResult(0.0, 0.0));
        results.add(new ComputationResult(0.0, 0.0));
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–∏
     */
    public void run() {
        displayHeader();
        
        // –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é
        boolean exit = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        
        initializeResults();  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        
        do {
            try {
                displayInteractiveMenu();
                System.out.print(ANSI_CYAN + "–í–∞—à –≤–∏–±—ñ—Ä: " + ANSI_RESET);
                String input = in.readLine();
                char command = '?';
                if (input != null && !input.isEmpty()) {
                    command = input.charAt(0);
                }
                
                switch (command) {
                    case '–¥':
                        System.out.println(ANSI_BOLD + ANSI_BLUE + "\n" + VIEW_SYMBOL + " –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö." + ANSI_RESET);
                        displayCurrentTable();
                        break;
                        
                    case '–≥':
                        System.out.println(ANSI_BOLD + ANSI_BLUE + "\n" + GENERATE_SYMBOL + " –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö." + ANSI_RESET);
                        generateRandomData();
                        displayCurrentTable();
                        break;
                        
                    case '–∑':
                        System.out.println(ANSI_BOLD + ANSI_YELLOW + "\n" + SAVE_SYMBOL + " –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ..." + ANSI_RESET);
                        try {
                            saveResults();
                            System.out.println(ANSI_BOLD + ANSI_GREEN + "‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!" + ANSI_RESET);
                        } catch (IOException e) {
                            System.out.println(ANSI_BOLD + ANSI_RED + "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ: " + e.getMessage() + ANSI_RESET);
                        }
                        break;
                        
                    case '–ø':
                        System.out.println(ANSI_BOLD + ANSI_YELLOW + "\n" + RESTORE_SYMBOL + " –í—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è..." + ANSI_RESET);
                        try {
                            restoreResults();
                            System.out.println(ANSI_BOLD + ANSI_GREEN + "‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ —ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É!" + ANSI_RESET);
                            displayCurrentTable();
                        } catch (Exception e) {
                            System.out.println(ANSI_BOLD + ANSI_RED + "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: " + e.getMessage() + ANSI_RESET);
                        }
                        break;
                        
                    case '–≤':
                        System.out.println(ANSI_BOLD + ANSI_RED + "\n" + EXIT_SYMBOL + " –í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏..." + ANSI_RESET);
                        exit = true;
                        break;
                        
                    default:
                        System.out.println(ANSI_BOLD + ANSI_RED + "‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑." + ANSI_RESET);
                }
                
            } catch (IOException e) {
                System.out.println(ANSI_BOLD + ANSI_RED + "‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: " + e.getMessage() + ANSI_RESET);
            }
            
        } while (!exit);
        
        System.out.println(ANSI_BOLD + ANSI_RED + "\nüöÄ –ü—Ä–æ–≥—Ä–∞–º–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üëã" + ANSI_RESET);
    }
    
    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
     */
    private void displayHeader() {
        System.out.println(ANSI_BOLD + ANSI_PURPLE + "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" + ANSI_RESET);
        System.out.println(ANSI_BOLD + ANSI_PURPLE + "‚ïë        " + MATH_SYMBOL + " –û–ë–ß–ò–°–õ–Æ–í–ê–õ–¨–ù–ê –°–ò–°–¢–ï–ú–ê " + MATH_SYMBOL + "        ‚ïë" + ANSI_RESET);
        System.out.println(ANSI_BOLD + ANSI_PURPLE + "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" + ANSI_RESET);
    }
    
    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é
     */
    private void displayInteractiveMenu() {
        System.out.println(ANSI_BOLD + ANSI_CYAN + "\n‚ú® –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É... ‚ú®" + ANSI_RESET);
        System.out.print(ANSI_YELLOW + EXIT_SYMBOL + " '" + ANSI_BOLD + "–≤" + ANSI_RESET + ANSI_YELLOW + "'–∏—Ö—ñ–¥, " + 
                           VIEW_SYMBOL + " '" + ANSI_BOLD + "–¥" + ANSI_RESET + ANSI_YELLOW + "'–∏–≤–∏—Ç–∏—Å—è, " + 
                           GENERATE_SYMBOL + " '" + ANSI_BOLD + "–≥" + ANSI_RESET + ANSI_YELLOW + "'–µ–Ω–µ—Ä—É–≤–∞—Ç–∏, " + 
                           SAVE_SYMBOL + " '" + ANSI_BOLD + "–∑" + ANSI_RESET + ANSI_YELLOW + "'–±–µ—Ä–µ–≥—Ç–∏, " + 
                           RESTORE_SYMBOL + " '" + ANSI_BOLD + "–ø" + ANSI_RESET + ANSI_YELLOW + "'–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏: " + ANSI_RESET);
    }
    
    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ç–∞–±–ª–∏—Ü—é –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
     * 
     * <p>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤ (–ø—ñ–∑–Ω—î –∑–≤'—è–∑—É–≤–∞–Ω–Ω—è, –ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º).
     * –£ —Ü—å–æ–º—É –º–µ—Ç–æ–¥—ñ –∑–º—ñ–Ω–Ω–∞ {@code tableView} –º–∞—î —Ç–∏–ø —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É {@link TableView},
     * –∞–ª–µ —Ñ–∞–∫—Ç–∏—á–Ω–æ –ø–æ—Å–∏–ª–∞—î—Ç—å—Å—è –Ω–∞ –æ–±'—î–∫—Ç –∫–ª–∞—Å—É {@link ConcreteTableView}.</p>
     * 
     * <p>–ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É {@code tableView.displayTable()}, –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–æ–≥–æ, —è–∫–∏–π —Å–∞–º–µ –º–µ—Ç–æ–¥
     * –≤–∏–∫–æ–Ω–∞—Ç–∏ (—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é –≤ {@link ConcreteTableView} —á–∏ –¥–µ—è–∫—É —ñ–Ω—à—É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é),
     * –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏, –∞ –Ω–µ –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó. –¶–µ —ñ —î
     * –ø—Ä–∏–∫–ª–∞–¥–æ–º dynamic method dispatch - –º–µ—Ç–æ–¥–∏ –ø—Ä–∏–∑–Ω–∞—á–∞—é—Ç—å—Å—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
     * –≤—ñ–¥ —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ —Ç–∏–ø—É –æ–±'—î–∫—Ç–∞.</p>
     */
    private void displayCurrentTable() {
        if (results.isEmpty()) {
            System.out.println(ANSI_BOLD + ANSI_RED + "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø–æ—á–∞—Ç–∫—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–π—Ç–µ –¥–∞–Ω—ñ." + ANSI_RESET);
            return;
        }
        
        // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if (tableView instanceof ConcreteTableView) {
            ((ConcreteTableView) tableView).setData(results);
        }
        
        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        tableView.displayTable();
    }
    
    /**
     * –ì–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤—ñ –¥–∞–Ω—ñ, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å –∑ –Ω—É–ª—å–æ–≤–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
     */
    private void generateRandomData() {
        if (results.isEmpty() || results.size() < 2) {
            initializeResults();  // –Ø–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î –∞–±–æ —ó—Ö –º–µ–Ω—à–µ 2, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–∞–Ω–æ–≤–æ
        }
        
        // –ü–µ—Ä—à—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–∞–ª–∏—à–∞—î–º–æ –Ω—É–ª—å–æ–≤–∏–º–∏
        results.get(0).setXY(0.0, 0.0);
        
        // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –¥—Ä—É–≥–æ—ó –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
        Random random = new Random();
        double randomX = random.nextDouble() * 100; // –≤—ñ–¥ 0 –¥–æ 100
        double randomY = random.nextDouble() * 100; // –≤—ñ–¥ 0 –¥–æ 100
        
        // –û–∫—Ä—É–≥–ª—è—î–º–æ –¥–æ 2 –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        randomX = Math.round(randomX * 100.0) / 100.0;
        randomY = Math.round(randomY * 100.0) / 100.0;
        
        results.get(1).setXY(randomX, randomY);
        
        System.out.println(ANSI_BOLD + ANSI_GREEN + "‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!" + ANSI_RESET);
    }
    
    /**
     * –ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—á–∏—Å–ª–µ–Ω—å —É —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è.
     * 
     * @throws IOException –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –∑–∞–ø–∏—Å—É –≤ —Ñ–∞–π–ª
     */
    private void saveResults() throws IOException {
        if (results.isEmpty()) {
            throw new IOException("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.");
        }
        
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            out.writeObject(results);
        }
    }
    
    /**
     * –í—ñ–¥–Ω–æ–≤–ª—é—î —Ä–∞–Ω—ñ—à–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—á–∏—Å–ª–µ–Ω—å –∑ —Ñ–∞–π–ª—É —Ç–∞ –≤–∏–¥–∞–ª—è—î —Ñ–∞–π–ª –ø—ñ—Å–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è.
     * 
     * @throws IOException –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ —á–∏—Ç–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—É
     * @throws ClassNotFoundException —è–∫—â–æ –∫–ª–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
     */
    @SuppressWarnings("unchecked")
    private void restoreResults() throws IOException, ClassNotFoundException {
        File file = new File(FILE_NAME);
        if (!file.exists()) {
            throw new IOException("–§–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
        
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
            results = (List<ComputationResult>) in.readObject();
        }
        
        // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –ø—ñ—Å–ª—è –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        if (!file.delete()) {
            System.out.println(ANSI_BOLD + ANSI_YELLOW + "‚ö†Ô∏è –£–≤–∞–≥–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª –ø—ñ—Å–ª—è –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó." + ANSI_RESET);
        } else {
            System.out.println(ANSI_BOLD + ANSI_GREEN + "‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –ø—ñ—Å–ª—è –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó." + ANSI_RESET);
        }
    }
    
    /**
     * –ú–µ—Ç–æ–¥ main - –≤—Ö–æ–¥–Ω–∞ —Ç–æ—á–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∏
     * 
     * @param args –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
     */
    public static void main(String[] args) {
        System.out.println("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ");
        Application app = new Application();
        app.run();
    }
    
    /**
     * –ö–ª–∞—Å, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (x, y)
     */
    public static class ComputationResult implements Serializable {
        private static final long serialVersionUID = 1L;
        
        private double x;
        private double y;
        
        /**
         * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
         */
        public ComputationResult() {
            this.x = 0.0;
            this.y = 0.0;
        }
        
        /**
         * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
         * 
         * @param x –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ x
         * @param y –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ y
         */
        public ComputationResult(double x, double y) {
            this.x = x;
            this.y = y;
        }
        
        /**
         * –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è x
         * 
         * @return –∑–Ω–∞—á–µ–Ω–Ω—è x
         */
        public double getX() {
            return x;
        }
        
        /**
         * –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è x
         * 
         * @param x –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è x
         */
        public void setX(double x) {
            this.x = x;
        }
        
        /**
         * –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è y
         * 
         * @return –∑–Ω–∞—á–µ–Ω–Ω—è y
         */
        public double getY() {
            return y;
        }
        
        /**
         * –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è y
         * 
         * @param y –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è y
         */
        public void setY(double y) {
            this.y = y;
        }
        
        /**
         * –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è x —Ç–∞ y
         * 
         * @param x –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è x
         * @param y –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è y
         */
        public void setXY(double x, double y) {
            this.x = x;
            this.y = y;
        }
        
        /**
         * –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç–æ–¥ equals
         * 
         * @param o –æ–±'—î–∫—Ç –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
         * @return true, —è–∫—â–æ –æ–±'—î–∫—Ç–∏ —Ä—ñ–≤–Ω—ñ, false - –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É
         */
        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            
            ComputationResult that = (ComputationResult) o;
            
            if (Double.compare(that.x, x) != 0) return false;
            return Double.compare(that.y, y) == 0;
        }
        
        /**
         * –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç–æ–¥ hashCode
         * 
         * @return —Ö–µ—à-–∫–æ–¥ –æ–±'—î–∫—Ç–∞
         */
        @Override
        public int hashCode() {
            int result;
            long temp;
            temp = Double.doubleToLongBits(x);
            result = (int) (temp ^ (temp >>> 32));
            temp = Double.doubleToLongBits(y);
            result = 31 * result + (int) (temp ^ (temp >>> 32));
            return result;
        }
        
        /**
         * –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç–æ–¥ toString
         * 
         * @return —Ä—è–¥–∫–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞
         */
        @Override
        public String toString() {
            return "ComputationResult{" +
                    "x=" + x +
                    ", y=" + y +
                    '}';
        }
    }
    
    /**
     * –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–∞–±—Ä–∏–∫–∏ TableViewFactory
     */
    public static class ConcreteTableViewFactory implements TableViewFactory {
        /**
         * –°—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç TableView –∑ —à–∏—Ä–∏–Ω–æ—é –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
         * 
         * @return –æ–±'—î–∫—Ç —Ç–∏–ø—É TableView
         */
        @Override
        public TableView createTableView() {
            return new ConcreteTableView();
        }
        
        /**
         * –°—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç TableView –∑ –≤–∫–∞–∑–∞–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é
         * 
         * @param width —à–∏—Ä–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü—ñ
         * @return –æ–±'—î–∫—Ç —Ç–∏–ø—É TableView
         */
        @Override
        public TableView createTableView(int width) {
            return new ConcreteTableView(width);
        }
    }
    
    /**
     * –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è TableView –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ
     * <p>
     * –†–µ–∞–ª—ñ–∑—É—î –ø—É–Ω–∫—Ç 2 –∑–∞–≤–¥–∞–Ω–Ω—è: –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞–º—ñ—â–µ–Ω–Ω—è (–ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è, overriding),
     * –ø–æ—î–¥–Ω–∞–Ω–Ω—è (–ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, overloading), –¥–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤
     * (–ü—ñ–∑–Ω—î –∑–≤'—è–∑—É–≤–∞–Ω–Ω—è, –ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º, dynamic method dispatch).
     * 
     * <h2>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –û–û–ü –∫–æ–Ω—Ü–µ–ø—Ü—ñ–π:</h2>
     * 
     * <h3>–ó–∞–º—ñ—â–µ–Ω–Ω—è (overriding):</h3>
     * <ul>
     *   <li>{@link #displayTableHeader()} - –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î –º–µ—Ç–æ–¥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É {@link TableView#displayTableHeader()}</li>
     *   <li>{@link #displayTableBody()} - –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î –º–µ—Ç–æ–¥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É {@link TableView#displayTableBody()}</li>
     *   <li>{@link #displayTableFooter()} - –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î –º–µ—Ç–æ–¥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É {@link TableView#displayTableFooter()}</li>
     *   <li>{@link #displayTable()} - –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î –º–µ—Ç–æ–¥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É {@link TableView#displayTable()}</li>
     *   <li>{@link #setTableWidth(int)} - –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î –º–µ—Ç–æ–¥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É {@link TableView#setTableWidth(int)}</li>
     *   <li>{@link #getTableWidth()} - –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î –º–µ—Ç–æ–¥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É {@link TableView#getTableWidth()}</li>
     * </ul>
     * 
     * <h3>–ü–æ—î–¥–Ω–∞–Ω–Ω—è (overloading):</h3>
     * <ul>
     *   <li>–ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏:
     *     <ul>
     *       <li>{@link #ConcreteTableView()} - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤</li>
     *       <li>{@link #ConcreteTableView(int)} - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —à–∏—Ä–∏–Ω–∏</li>
     *       <li>{@link #ConcreteTableView(int, List)} - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —à–∏—Ä–∏–Ω–∏ —Ç–∞ –¥–∞–Ω–∏—Ö</li>
     *     </ul>
     *   </li>
     *   <li>–ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –º–µ—Ç–æ–¥–∏:
     *     <ul>
     *       <li>{@link #setTableWidth(int)} - —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É</li>
     *       <li>{@link #setTableWidth(int, String)} - –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –º–µ—Ç–æ–¥ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º</li>
     *     </ul>
     *   </li>
     * </ul>
     * 
     * <h3>–î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤ (–ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º):</h3>
     * <p>
     * –£ –º–µ—Ç–æ–¥—ñ {@link Application#displayCurrentTable()} –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º 
     * —Ç–∞ –ø—ñ–∑–Ω—î –∑–≤'—è–∑—É–≤–∞–Ω–Ω—è, –∫–æ–ª–∏ –∑–º—ñ–Ω–Ω–∞ —Ç–∏–ø—É {@link TableView} –ø–æ—Å–∏–ª–∞—î—Ç—å—Å—è –Ω–∞ –æ–±'—î–∫—Ç 
     * —Ç–∏–ø—É {@link ConcreteTableView}, —ñ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –º–µ—Ç–æ–¥ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó, –∞ –Ω–µ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:
     * <pre>
     * if (tableView instanceof ConcreteTableView) {
     *     ((ConcreteTableView) tableView).setData(results);
     * }
     * tableView.displayTable(); // –≤–∏–∫–ª–∏–∫–∞—î —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é ConcreteTableView.displayTable()
     * </pre>
     * </p>
     */
    public static class ConcreteTableView implements TableView {
        /** –í–∏–∑–Ω–∞—á–∞—î —à–∏—Ä–∏–Ω—É —Ç–∞–±–ª–∏—Ü—ñ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º */
        private static final int DEFAULT_WIDTH = 40;
        
        /** –ü–æ—Ç–æ—á–Ω–∞ —à–∏—Ä–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü—ñ */
        private int width;
        
        /** –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Ç–∞–±–ª–∏—Ü—ñ */
        private List<ComputationResult> data;
        
        /**
         * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
         * 
         * <p>–ß–∞—Å—Ç–∏–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –ø–æ—î–¥–Ω–∞–Ω–Ω—è (overloading) - –ø–µ—Ä—à–∏–π —ñ–∑ —Ç—Ä—å–æ—Ö –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤</p>
         */
        public ConcreteTableView() {
            this.width = DEFAULT_WIDTH;
            this.data = new ArrayList<>();
        }
        
        /**
         * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑ –≤–∫–∞–∑–∞–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é —Ç–∞–±–ª–∏—Ü—ñ
         * 
         * <p>–ß–∞—Å—Ç–∏–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –ø–æ—î–¥–Ω–∞–Ω–Ω—è (overloading) - –¥—Ä—É–≥–∏–π —ñ–∑ —Ç—Ä—å–æ—Ö –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤</p>
         * 
         * @param width —à–∏—Ä–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü—ñ
         */
        public ConcreteTableView(int width) {
            this.width = width;
            this.data = new ArrayList<>();
        }
        
        /**
         * –ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑ —à–∏—Ä–∏–Ω–æ—é —ñ –¥–∞–Ω–∏–º–∏
         * 
         * <p>–ß–∞—Å—Ç–∏–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –ø–æ—î–¥–Ω–∞–Ω–Ω—è (overloading) - —Ç—Ä–µ—Ç—ñ–π —ñ–∑ —Ç—Ä—å–æ—Ö –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤</p>
         * 
         * @param width —à–∏—Ä–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü—ñ
         * @param data –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
         */
        public ConcreteTableView(int width, List<ComputationResult> data) {
            this.width = width;
            this.data = new ArrayList<>(data);
        }
        
        /**
         * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Ç–∞–±–ª–∏—Ü—ñ
         * 
         * @param data —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –æ–±—á–∏—Å–ª–µ–Ω—å
         */
        public void setData(List<ComputationResult> data) {
            this.data = new ArrayList<>(data);
        }
        
        /**
         * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
         * 
         * @return —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –æ–±—á–∏—Å–ª–µ–Ω—å
         */
        public List<ComputationResult> getData() {
            return new ArrayList<>(data);
        }
        
        /**
         * –í–∏–≤–æ–¥–∏—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É –ª—ñ–Ω—ñ—é —à–∏—Ä–∏–Ω–æ—é width —Å–∏–º–≤–æ–ª—ñ–≤
         */
        private void drawLine() {
            for (int i = 0; i < width; i++) {
                System.out.print("-");
            }
            System.out.println();
        }
        
        /**
         * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ
         * 
         * <p>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–º—ñ—â–µ–Ω–Ω—è (overriding) - —Ü–µ–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î 
         * –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –º–µ—Ç–æ–¥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É {@link TableView#displayTableHeader()}</p>
         */
        @Override
        public void displayTableHeader() {
            drawLine();
            
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ —à–∏—Ä–∏–Ω—É —Å—Ç–æ–≤–ø—Ü—ñ–≤
            int colWidth = (width - 3) / 2;
            
            // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–∞ –≤–∏–≤–æ–¥–∏–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            String format = "| %" + colWidth + "s | %" + colWidth + "s |\n";
            System.out.printf(format, "X", "Y");
            
            drawLine();
        }
        
        /**
         * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ç—ñ–ª–æ —Ç–∞–±–ª–∏—Ü—ñ (–¥–∞–Ω—ñ)
         * 
         * <p>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–º—ñ—â–µ–Ω–Ω—è (overriding) - —Ü–µ–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î 
         * –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –º–µ—Ç–æ–¥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É {@link TableView#displayTableBody()}</p>
         */
        @Override
        public void displayTableBody() {
            if (data.isEmpty()) {
                System.out.printf("| %" + (width - 4) + "s |\n", "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è");
                return;
            }
            
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ —à–∏—Ä–∏–Ω—É —Å—Ç–æ–≤–ø—Ü—ñ–≤
            int colWidth = (width - 3) / 2;
            
            // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–∞ –≤–∏–≤–æ–¥–∏–º–æ –¥–∞–Ω—ñ
            String format = "| %" + colWidth + ".3f | %" + colWidth + ".3f |\n";
            for (ComputationResult result : data) {
                System.out.printf(format, result.getX(), result.getY());
            }
        }
        
        /**
         * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø—ñ–¥—Å—É–º–∫–æ–≤—É —á–∞—Å—Ç–∏–Ω—É —Ç–∞–±–ª–∏—Ü—ñ
         * 
         * <p>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–º—ñ—â–µ–Ω–Ω—è (overriding) - —Ü–µ–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î 
         * –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –º–µ—Ç–æ–¥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É {@link TableView#displayTableFooter()}</p>
         */
        @Override
        public void displayTableFooter() {
            drawLine();
        }
        
        /**
         * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤—Å—é —Ç–∞–±–ª–∏—Ü—é (–∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç—ñ–ª–æ, –ø—ñ–¥—Å—É–º–æ–∫)
         * 
         * <p>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–º—ñ—â–µ–Ω–Ω—è (overriding) - —Ü–µ–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î 
         * –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –º–µ—Ç–æ–¥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É {@link TableView#displayTable()}</p>
         * 
         * <p>–¶–µ–π –º–µ—Ç–æ–¥ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –ø—ñ–∑–Ω—î –∑–≤'—è–∑—É–≤–∞–Ω–Ω—è, –æ—Å–∫—ñ–ª—å–∫–∏ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É 
         * {@code tableView.displayTable()} —É –º–µ—Ç–æ–¥—ñ {@link Application#displayCurrentTable()},
         * –¥–µ {@code tableView} –º–∞—î —Ç–∏–ø {@link TableView}, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Å–∞–º–µ —Ü–µ–π –º–µ—Ç–æ–¥,
         * –∞ –Ω–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –º–µ—Ç–æ–¥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.</p>
         */
        @Override
        public void displayTable() {
            System.out.println("\n" + ANSI_BOLD + ANSI_GREEN + "üìä –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ " + ANSI_RESET);
            displayTableHeader();
            displayTableBody();
            displayTableFooter();
        }
        
        /**
         * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —à–∏—Ä–∏–Ω—É —Ç–∞–±–ª–∏—Ü—ñ
         * 
         * <p>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–º—ñ—â–µ–Ω–Ω—è (overriding) - —Ü–µ–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î 
         * –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –º–µ—Ç–æ–¥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É {@link TableView#setTableWidth(int)}</p>
         * 
         * <p>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—î–¥–Ω–∞–Ω–Ω—è (overloading) - —Ü–µ–π –º–µ—Ç–æ–¥ —î –ø–µ—Ä—à–∏–º —ñ–∑ –¥–≤–æ—Ö
         * –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ {@code setTableWidth}</p>
         * 
         * @param width —à–∏—Ä–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü—ñ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
         * @return –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —à–∏—Ä–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü—ñ
         */
        @Override
        public int setTableWidth(int width) {
            // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —à–∏—Ä–∏–Ω–∞ - 20 —Å–∏–º–≤–æ–ª—ñ–≤
            if (width < 20) {
                width = 20;
            }
            this.width = width;
            return this.width;
        }
        
        /**
         * –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—É —à–∏—Ä–∏–Ω—É —Ç–∞–±–ª–∏—Ü—ñ
         * –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ—Ç–æ–¥—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
         * 
         * @return –ø–æ—Ç–æ—á–Ω–∞ —à–∏—Ä–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü—ñ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
         */
        @Override
        public int getTableWidth() {
            return width;
        }
        
        /**
         * –ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó overloading
         * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —à–∏—Ä–∏–Ω—É —Ç–∞–±–ª–∏—Ü—ñ —ñ –Ω–∞–∑–≤—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
         * 
         * <p>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—î–¥–Ω–∞–Ω–Ω—è (overloading) - —Ü–µ–π –º–µ—Ç–æ–¥ —î –¥—Ä—É–≥–∏–º —ñ–∑ –¥–≤–æ—Ö 
         * –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ {@code setTableWidth}</p>
         * 
         * <p>–ú–∞—î —Ç–æ–π —Å–∞–º–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (–Ω–∞–∑–≤—É), –∞–ª–µ —ñ–Ω—à–∏–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ 
         * –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ {@link #setTableWidth(int)}</p>
         * 
         * @param width —à–∏—Ä–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü—ñ
         * @param title –Ω–∞–∑–≤–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
         * @return –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —à–∏—Ä–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü—ñ
         */
        public int setTableWidth(int width, String title) {
            System.out.println("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ: " + title);
            return setTableWidth(width);
        }
    }
}
