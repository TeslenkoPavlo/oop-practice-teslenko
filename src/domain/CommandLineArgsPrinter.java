
package src.domain;

/**
 * <h1>Command Line Arguments Printer</h1>
 * 
 * –¶–µ–π –∫–ª–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –æ–±—Ä–æ–±–∫—É —Ç–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –≤–∏–≤—ñ–¥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ 
 * –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞. –í—ñ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –ø—Ä–∞–≤–∏–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è JavaDoc
 * —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤ Java.
 * 
 * @author Pavlo Teslenko
 */
public class CommandLineArgsPrinter {
    
    /** –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞, —â–æ –≤–∏–∑–Ω–∞—á–∞—î —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á –¥–ª—è –≤–∏–≤–æ–¥—É */
    private static final String SEPARATOR = "===========================================";
    
    /** –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –≤–∏–≤–æ–¥—É, –∫–æ–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ */
    private static final String NO_ARGS_MESSAGE = "–ê—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ!";
    
    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —ñ –≤–∏–≤–æ–¥—É –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
     * 
     * @param args –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤, —â–æ –º—ñ—Å—Ç–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
     * @return —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫ –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
     */
    public String formatAndProcessArgs(String[] args) {
        // –°—Ç–≤–æ—Ä—é—î–º–æ StringBuilder –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—ó –ø–æ–±—É–¥–æ–≤–∏ —Ä–µ–∑—É–ª—å—Ç—É—é—á–æ–≥–æ —Ä—è–¥–∫–∞
        StringBuilder output = new StringBuilder();
        
        // –î–æ–¥–∞—î–º–æ –≤–µ—Ä—Ö–Ω—ñ–π —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á
        output.append(SEPARATOR).append("\n");
        
        // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        output.append("üìã –ê–†–ì–£–ú–ï–ù–¢–ò –ö–û–ú–ê–ù–î–ù–û–ì–û –†–Ø–î–ö–ê\n");
        
        // –î–æ–¥–∞—î–º–æ —â–µ –æ–¥–∏–Ω —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á
        output.append(SEPARATOR).append("\n\n");
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–µ—Ä–µ–¥–∞–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        if (args == null || args.length == 0) {
            // –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î, –¥–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            output.append("‚ùå ").append(NO_ARGS_MESSAGE).append("\n");
        } else {
            // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
            output.append("üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤: ").append(args.length).append("\n\n");
            
            // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö —ñ –¥–æ–¥–∞—î–º–æ —ó—Ö –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            for (int i = 0; i < args.length; i++) {
                output.append("üîπ –ê—Ä–≥—É–º–µ–Ω—Ç #").append(i + 1).append(": ")
                      .append("\"").append(args[i]).append("\"").append("\n");
            }
        }
        
        // –î–æ–¥–∞—î–º–æ –Ω–∏–∂–Ω—ñ–π —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á
        output.append("\n").append(SEPARATOR);
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–±—É–¥–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫
        return output.toString();
    }
    
    /**
     * –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–≤–æ–¥—É –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
     * 
     * @param args –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤, —â–æ –º—ñ—Å—Ç–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
     */
    public void printArgs(String[] args) {
        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —ñ –≤–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        System.out.println(formatAndProcessArgs(args));
    }
}
