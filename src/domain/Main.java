
package src.domain;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Random;

/**
 * –û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å –ø—Ä–æ–≥—Ä–∞–º–∏, —â–æ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î —Ä–æ–±–æ—Ç—É –∑ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è–º–∏.
 * <p>
 * –ú—ñ—Å—Ç–∏—Ç—å —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É main().
 * 
 * @author –¢–µ—Å–ª–µ–Ω–∫–æ –ü–∞–≤–ª–æ
 * @version 1.0
 * @see Main#main(String[])
 */
public class Main {
    /** 
     * –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –≤–∏–≤–æ–¥—É –≤ –∫–æ–Ω—Å–æ–ª—å
     */
    public static final String ANSI_RESET = "\u001B[0m";
    public static final String ANSI_GREEN = "\u001B[32m";
    public static final String ANSI_CYAN = "\u001B[36m";
    public static final String ANSI_YELLOW = "\u001B[33m";
    public static final String ANSI_RED = "\u001B[31m";
    public static final String ANSI_BLUE = "\u001B[34m";
    public static final String ANSI_PURPLE = "\u001B[35m";
    public static final String ANSI_BOLD = "\u001B[1m";
    
    // –°–∏–º–≤–æ–ª–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
    public static final String MATH_SYMBOL = "üßÆ";
    public static final String SAVE_SYMBOL = "üíæ";
    public static final String RESTORE_SYMBOL = "üìÇ";
    public static final String VIEW_SYMBOL = "üëÅÔ∏è";
    public static final String GENERATE_SYMBOL = "üîÑ";
    public static final String EXIT_SYMBOL = "üö™";

    /**
     * –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏.
     * –°—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –π–æ–≥–æ —Ä–æ–±–æ—Ç—É.
     * 
     * @param args –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏ (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è)
     * @throws Exception —è–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∏
     */
    public static void main(String[] args) throws Exception {
        System.out.println(ANSI_BOLD + ANSI_PURPLE + "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" + ANSI_RESET);
        System.out.println(ANSI_BOLD + ANSI_PURPLE + "‚ïë        " + MATH_SYMBOL + " –û–ë–ß–ò–°–õ–Æ–í–ê–õ–¨–ù–ê –°–ò–°–¢–ï–ú–ê " + MATH_SYMBOL + "        ‚ïë" + ANSI_RESET);
        System.out.println(ANSI_BOLD + ANSI_PURPLE + "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" + ANSI_RESET);

        // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞—Ç–µ—Ä–Ω—É Factory Method –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ Displayable
        DisplayableFactory factory = new ComputationDisplayFactory();
        Displayable display = factory.createDisplayable();
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        display.initialize();
        
        // –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é
        boolean exit = false;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String command;
        
        do {
            System.out.println(ANSI_BOLD + ANSI_CYAN + "\n‚ú® –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É... ‚ú®" + ANSI_RESET);
            System.out.print(ANSI_YELLOW + EXIT_SYMBOL + " '" + ANSI_BOLD + "–≤" + ANSI_RESET + ANSI_YELLOW + "'–∏—Ö—ñ–¥, " + 
                               VIEW_SYMBOL + " '" + ANSI_BOLD + "–ø" + ANSI_RESET + ANSI_YELLOW + "'–æ–∫–∞–∑–∞—Ç–∏, " + 
                               GENERATE_SYMBOL + " '" + ANSI_BOLD + "–≥" + ANSI_RESET + ANSI_YELLOW + "'–µ–Ω–µ—Ä—É–≤–∞—Ç–∏, " + 
                               SAVE_SYMBOL + " '" + ANSI_BOLD + "–∑" + ANSI_RESET + ANSI_YELLOW + "'–±–µ—Ä–µ–≥—Ç–∏, " + 
                               RESTORE_SYMBOL + " '" + ANSI_BOLD + "–æ" + ANSI_RESET + ANSI_YELLOW + "'–Ω–æ–≤–∏—Ç–∏: " + ANSI_RESET);
            
            try {
                command = in.readLine().trim().toLowerCase();
                
                if (command.isEmpty()) {
                    continue;
                }
                
                char ch = command.charAt(0);
                
                switch (ch) {
                        
                    case '–ø':
                        System.out.println(ANSI_BOLD + ANSI_CYAN + "\n" + VIEW_SYMBOL + " –ü–æ–∫–∞–∑ –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö" + ANSI_RESET);
                        try {
                            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è results —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å—ñ—é
                            java.lang.reflect.Field field = ComputationDisplay.class.getDeclaredField("results");
                            field.setAccessible(true);
                            
                            // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—é
                            @SuppressWarnings("unchecked")
                            java.util.ArrayList<ComputationResult> results = 
                                (java.util.ArrayList<ComputationResult>) field.get(display);
                            
                            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
                            int size = results.size();
                            
                            // –û—á–∏—â–∞—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—é
                            results.clear();
                            
                            // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –Ω—É–ª—å–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
                            for (int i = 0; i < size; i++) {
                                results.add(new ComputationResult(0.0, 0.0));
                            }
                            
                            System.out.println(ANSI_BOLD + ANSI_GREEN + "‚úÖ –ó–Ω–∞—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ!" + ANSI_RESET);
                        } catch (Exception e) {
                            System.out.println(ANSI_BOLD + ANSI_RED + "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: " + e.getMessage() + ANSI_RESET);
                        }
                        display.displayAll();
                        break;
                        
                    case '–≥':
                        System.out.println(ANSI_BOLD + ANSI_BLUE + "\n" + GENERATE_SYMBOL + " –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö." + ANSI_RESET);
                        generateRandomData(display);
                        display.displayAll();
                        break;
                        
                    case '–∑':
                        System.out.println(ANSI_BOLD + ANSI_YELLOW + "\n" + SAVE_SYMBOL + " –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ..." + ANSI_RESET);
                        try {
                            display.saveResults();
                            System.out.println(ANSI_BOLD + ANSI_GREEN + "‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!" + ANSI_RESET);
                        } catch (IOException e) {
                            System.out.println(ANSI_BOLD + ANSI_RED + "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ: " + e.getMessage() + ANSI_RESET);
                        }
                        display.displayAll();
                        break;
                        
                    case '–æ':
                        System.out.println(ANSI_BOLD + ANSI_YELLOW + "\n" + RESTORE_SYMBOL + " –í—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è..." + ANSI_RESET);
                        try {
                            display.restoreResults();
                            System.out.println(ANSI_BOLD + ANSI_GREEN + "‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ —ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É!" + ANSI_RESET);
                        } catch (Exception e) {
                            System.out.println(ANSI_BOLD + ANSI_RED + "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: " + e.getMessage() + ANSI_RESET);
                        }
                        display.displayAll();
                        break;
                        
                    case '–≤':
                        System.out.println(ANSI_BOLD + ANSI_RED + "\n" + EXIT_SYMBOL + " –í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏..." + ANSI_RESET);
                        exit = true;
                        break;
                        
                    default:
                        System.out.println(ANSI_BOLD + ANSI_RED + "‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑." + ANSI_RESET);
                }
                
            } catch (IOException e) {
                System.out.println(ANSI_BOLD + ANSI_RED + "‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: " + e.getMessage() + ANSI_RESET);
            }
            
        } while (!exit);
        
        System.out.println(ANSI_BOLD + ANSI_RED + "\nüöÄ –ü—Ä–æ–≥—Ä–∞–º–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üëã" + ANSI_RESET);
    }
    
    /**
     * –ì–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
     * –°—Ç–≤–æ—Ä—é—î –Ω–∞–±—ñ—Ä —Ç–æ—á–æ–∫ –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏.
     * 
     * @param display –æ–±'—î–∫—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
     */
    private static void generateRandomData(Displayable display) {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è results —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å—ñ—é
            java.lang.reflect.Field field = ComputationDisplay.class.getDeclaredField("results");
            field.setAccessible(true);
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—é
            @SuppressWarnings("unchecked")
            java.util.ArrayList<ComputationResult> results = 
                (java.util.ArrayList<ComputationResult>) field.get(display);
            
            // –û—á–∏—â–∞—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—é
            results.clear();
            
            // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –¥–∞–Ω—ñ
            Random random = new Random();
            int count = 5 + random.nextInt(3); // –≤—ñ–¥ 5 –¥–æ 7 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            
            for (int i = 0; i < count; i++) {
                double x = random.nextInt(600); // –≤—ñ–¥ 0 –¥–æ 599
                double y = Math.sin(Math.toRadians(x)); // –æ–±—á–∏—Å–ª—é—î–º–æ —Å–∏–Ω—É—Å –≤ —Ä–∞–¥—ñ–∞–Ω–∞—Ö
                results.add(new ComputationResult(x, y));
            }
            
        } catch (Exception e) {
            System.out.println(ANSI_BOLD + ANSI_RED + "‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö: " + e.getMessage() + ANSI_RESET);
        }
    }
}


    
